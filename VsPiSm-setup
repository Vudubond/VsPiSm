#!/bin/bash
checktruenumber='^[0-9]+$'
moduledir=/usr/local/vpssim
opensslversion=openssl-1.0.2h
zlibversion=zlib-1.2.8
kiemtraemail3="^(([-a-zA-Z0-9\!#\$%\&\'*+/=?^_\`{\|}~])+\.)*[-a-zA-Z0-9\!#\$%\&\'*+/=?^_\`{\|}~]+@\w((-|\w)*\w)*\.(\w((-|\w)*\w)*\.)*\w{2,24}$";
svip=$(wget http://ipecho.net/plain -O - -q ; echo)
echo "=========================================================================="
echo "Default VPSSIM setup PHP 5.6 for your server. If you want to use "
echo "--------------------------------------------------------------------------"
echo "other PHP versions, after Setup finished, change PHP version by using"
echo "--------------------------------------------------------------------------"
echo "[ Change PHP Version ] in [ Update System ] on VPSSIM Menu"
echo "--------------------------------------------------------------------------"
echo "PHP Version support: PHP 7.0, PHP 5.6, PHP 5.5 & PHP 5.4"
cpuname=$( awk -F: '/model name/ {name=$2} END {print name}' /proc/cpuinfo )
cpucores=$( awk -F: '/model name/ {core++} END {print core}' /proc/cpuinfo )
cpufreq=$( awk -F: ' /cpu MHz/ {freq=$2} END {print freq}' /proc/cpuinfo )
svram=$( free -m | awk 'NR==2 {print $2}' )
svhdd=$( df -h | awk 'NR==2 {print $2}' )
svswap=$( free -m | awk 'NR==4 {print $2}' )
echo "=========================================================================="
echo "Server's Parameters:  "
echo "--------------------------------------------------------------------------"
echo "Server Type: $(virt-what | awk 'NR==1 {print $NF}')"
echo "CPU Type: $cpuname"
echo "CPU Core: $cpucores"
echo "CPU Speed: $cpufreq MHz"
echo "Memory: $svram MB"
echo "Disk: $svhdd"
echo "IP: $svip"
echo "--------------------------------------------------------------------------"
echo "Fill Out Your Information: "
echo "=========================================================================="
echo -n "Type In Phpmyadmin Port [ENTER]: " 
read svport
if [ "$svport" = "80" ] || [ "$svport" = "443" ] || [ "$svport" = "22" ] || [ "$svport" = "3306" ] || [ "$svport" = "25" ] || [ "$svport" = "465" ] || [ "$svport" = "587" ] || [ "$svport" = "21" ]; then
	svport="2313"
echo "PhpMyAdmin port can not be coincide with the other port service"
echo "vpssim will set PMA port is 2313"
fi
if [ "$svport" = "" ] ; then
clear
    
 echo -e "****************** PHPMYADMIN PORT CAN NOT BE VACATED ! ******************"
bash /root/vpssim-setup
exit
fi
if ! [[ $svport -ge 100 && $svport -le 65535  ]] ; then  
clear
echo "=========================================================================="
echo "$svport is wrong!"
echo "--------------------------------------------------------------------------"
echo "The Port must be a number within range of (100 - 65535)."
echo "--------------------------------------------------------------------------"
echo "Please try again !" 
echo "-------------------------------------------------------------------------"
read -p "Press [Enter] to continue  ..."
clear
bash /root/vpssim-setup
exit
fi 
echo "--------------------------------------------------------------------------"
echo -n "Type in Your eMail [ENTER]: " 
read vpssimemail
if [ "$vpssimemail" = "" ]; then
clear
echo "=========================================================================="
echo "You type wrong. Please try again!"
echo "-------------------------------------------------------------------------"
read -p "Press [Enter] to continue  ..."
clear
bash /root/vpssim-setup
exit
fi

if [[ ! "$vpssimemail" =~ $kiemtraemail3 ]]; then
clear
echo "=========================================================================="
echo "$vpssimemail maybe an invalid email!"
echo "--------------------------------------------------------------------------"
echo "Please try again !"
echo "-------------------------------------------------------------------------"
read -p "Press [Enter] to continue  ..."
clear
bash /root/vpssim-setup
exit
fi
prompt="Type in your choice: "
options=( "MariaDB 10.0 " "MariaDB 5.5")
echo "=========================================================================="
echo "Choose MariaDB Version "
echo "=========================================================================="
PS3="$prompt"
select opt in "${options[@]}"; do 

    case "$REPLY" in
    1) mariadbversion="10.0"; break;;
    2) mariadbversion="5.5"; break;;
    *) echo "You typed wrong, Please type in the ordinal number on the list";continue;;
    esac  
done
if [ "$mariadbversion" = "10.0" ]; then
phienbanmariadb=10.0
else 
phienbanmariadb=5.5
fi


echo "-------------------------------------------------------------------------"
echo "Password for root of MySQL must be at least 8 characters long. "
echo "-------------------------------------------------------------------------"
echo -n "Type in the password for root of MySQL [ENTER]: " 
read passrootmysql
if [[ ! ${#passrootmysql} -ge 8 ]]; then
clear
echo "========================================================================="
echo "Password for root of MySQL must be at least 8 characters long. "
echo "-------------------------------------------------------------------------"
echo "Please try again !"
echo "-------------------------------------------------------------------------"
read -p "Press [Enter] to continue  ..."
clear
bash /root/vpssim-setup
exit
fi  

checkpass="^[a-zA-Z0-9_][-a-zA-Z0-9_]{0,61}[a-zA-Z0-9_]$";
if [[ ! "$passrootmysql" =~ $checkpass ]]; then
clear
echo "========================================================================="
echo "You must use only numbers, letters to set password !"
echo "-------------------------------------------------------------------------"
echo "Please try again !"
echo "-------------------------------------------------------------------------"
read -p "Press [Enter] to continue  ..."
clear
bash /root/vpssim-setup
exit
fi  
echo "$passrootmysql" > /tmp/passrootmysql
###############################################################################
#Download Nginx, VPSSIM & phpMyadmin Version
cd /tmp
rm -rf 00-all-nginx-version.txt
rm -rf vpssim.newversion
rm -rf 00-all-phpmyadmin-version.txt
###########################
download_version_nginx () {
wget --no-check-certificate -q https://vpssim.com/script/vpssim/00-all-nginx-version.txt
}
download_version_nginx
checkdownload_version_nginx=`cat /tmp/00-all-nginx-version.txt`
if [ -z "$checkdownload_version_nginx" ]; then
download_version_nginx
fi
###########################
download_version_phpmyadmin () {
wget --no-check-certificate -q https://vpssim.com/script/vpssim/00-all-phpmyadmin-version.txt
}
download_version_phpmyadmin
checkdownload_version_phpmyadmin=`cat /tmp/00-all-phpmyadmin-version.txt`
if [ -z "$checkdownload_version_phpmyadmin" ]; then
download_version_phpmyadmin
fi
###########################
download_version_vpssim () {
wget -q --no-check-certificate https://vpssim.com/script/vpssim/vpssim.newversion
}
download_version_vpssim
checkdownload_version_vpssim=`cat /tmp/vpssim.newversion`
if [ -z "$checkdownload_version_vpssim" ]; then
download_version_vpssim
fi
###########################
cd
phpmyadmin_version=`cat /tmp/00-all-phpmyadmin-version.txt | awk 'NR==2 {print $1}' | sed 's/|//' | sed 's/|//'`
Nginx_VERSION=`cat /tmp/00-all-nginx-version.txt | awk 'NR==2 {print $1}' | sed 's/|//' | sed 's/|//'`
vpssim_version=`cat /tmp/vpssim.newversion`

# End Download Nginx, VPSSIM & phpMyadmin Version
###############################################################################

clear
echo "=========================================================================="
echo "VPSSIM Will Setup Your Server Follow The Information Below:"
echo "=========================================================================="
echo "Your eMail: $vpssimemail"
echo "--------------------------------------------------------------------------"
echo "phpMyAdmin Port: $svport"
echo "--------------------------------------------------------------------------"
echo "phpMyAdmin Version: $phpmyadmin_version"
echo "--------------------------------------------------------------------------"
echo "MariaDB Version: $phienbanmariadb"
echo "--------------------------------------------------------------------------"
echo "Password for root of MySQL: $passrootmysql"
echo "--------------------------------------------------------------------------"
echo "Nginx Version: $Nginx_VERSION"
echo "--------------------------------------------------------------------------"
echo "PHP Version: 5.6"
echo "--------------------------------------------------------------------------"
echo "VPSSIM Version: $vpssim_version"
echo "=========================================================================="
prompt="Type in your choice: "
options=( "Agree" "Do Not Agree")
PS3="$prompt"
select opt in "${options[@]}"; do 

    case "$REPLY" in
    1) xacnhanthongtin="dongy"; break;;
    2) xacnhanthongtin="khongdongy"; break;;
    *) echo "You typed wrong, Please type in the ordinal number on the list";continue;;
    esac  
done

if [ "$xacnhanthongtin" = "dongy" ]; then
echo "--------------------------------------------------------------------------"
echo "Prepare to setup VPSSIM ..."
sleep 2
else 
clear
rm -rf /root/install && bash /root/vpssim-setup
exit
fi
download_nginx_conf () {
wget --no-check-certificate -q https://vpssim.com/script/vpssim/nginx.conf -O /tmp/nginx.conf
}
download_nginx_conf
checkdownload_nginx_conf=`cat /tmp/nginx.conf`
if [ -z "$checkdownload_nginx_conf" ]; then
download_nginx_conf
fi
cat >> "/root/.bash_profile" <<END
IPvpssimcheck="\$(echo \$SSH_CONNECTION | cut -d " " -f 1)"
timeloginvpssimcheck=\$(date +"%e %b %Y, %a %r")
echo 'Someone has IP address '\$IPvpssimcheck' login to $svip on '\$timeloginvpssimcheck'.' | mail -s 'eMail Notifications From VPSSIM On $svip' ${vpssimemail}
END
echo "$svport" > /tmp/priport.txt
if [ -s /etc/selinux/config ]; then
sed -i 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/selinux/config
fi
arch=`uname -m`
if [ "$arch" = "x86_64" ]; then
yum -y install epel-release
rpm -Uvh http://rpms.famillecollet.com/enterprise/remi-release-6.rpm
else
yum -y install epel-release
rpm -Uvh http://rpms.famillecollet.com/enterprise/remi-release-6.rpm
fi
if [ -f /etc/yum.repos.d/epel.repo ]
then
sudo sed -i "s/mirrorlist=https/mirrorlist=http/" /etc/yum.repos.d/epel.repo
fi

if [ "$phienbanmariadb" = "10.0" ]; then
	if [ "$arch" = "x86_64" ]; then
cat > "/etc/yum.repos.d/mariadb.repo" <<END
# MariaDB 10.0 CentOS repository list
# http://downloads.mariadb.org/mariadb/repositories/
[mariadb]
name = MariaDB
baseurl = http://yum.mariadb.org/10.0/centos6-amd64
gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB
gpgcheck=1
END
	fi
	if [ ! "$arch" = "x86_64" ]; then	
cat > "/etc/yum.repos.d/mariadb.repo" <<END
# MariaDB 10.0 CentOS repository list
# http://downloads.mariadb.org/mariadb/repositories/
[mariadb]
name = MariaDB
baseurl = http://yum.mariadb.org/10.0/centos6-x86
gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB
gpgcheck=1
END
	fi	
fi


if [ "$phienbanmariadb" = "5.5" ]; then
	if [ "$arch" = "x86_64" ]; then
cat > "/etc/yum.repos.d/mariadb.repo" <<END
# MariaDB 5.5 CentOS repository list 
# http://downloads.mariadb.org/mariadb/repositories/
[mariadb]
name = MariaDB
baseurl = http://yum.mariadb.org/5.5/centos6-amd64
gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB
gpgcheck=1
END
	fi
	
	if [ ! "$arch" = "x86_64" ]; then	
cat > "/etc/yum.repos.d/mariadb.repo" <<END
# MariaDB 5.5 CentOS repository list 
# http://downloads.mariadb.org/mariadb/repositories/
[mariadb]
name = MariaDB
baseurl = http://yum.mariadb.org/5.5/centos6-x86
gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB
gpgcheck=1
END
	fi
fi

service sendmail stop
chkconfig sendmail off
service xinetd stop
chkconfig xinetd off
service saslauthd stop
chkconfig saslauthd off
service rsyslog stop
chkconfig rsyslog off
service postfix stop
chkconfig postfix off

yum -y remove mysql*
yum -y remove php*
yum -y remove httpd*
yum -y remove sendmail*
yum -y remove postfix*
yum -y remove rsyslog*
yum -y update


mkdir -p /usr/local/vpssim
cd /usr/local/vpssim
groupadd nginx
sudo yum -y groupinstall "Development Tools"
useradd -g nginx -d /dev/null -s /sbin/nologin nginx
sudo yum -y install gcc gcc-c++ pcre pcre-devel zlib zlib-devel mailx tar expect imake lsof autoconf nc ca-certificates libedit-devel make automake cmake expat-devel perl-libwww-perl perl-Crypt-SSLeay perl-Net-SSLeay tree virt-what openssl-devel libtool bind-utils libXext-devel cyrus-sasl-devel glib2 glib2-devel openssl ncurses-devel bzip2 bzip2-devel flex bison libcurl-devel which libevent libevent-devel libxslt-devel gd gd-devel perl-ExtUtils-Embed patch sysstat libgcj gettext-devel vim-minimal nano cairo-devel libxml2-devel libxml2 libpng-devel freetype freetype-devel libart_lgpl-devel  GeoIP-devel gperftools-devel libicu libicu-devel aspell gmp-devel aspell-devel libtidy libtidy-devel readline-devel iptables* coreutils libedit-devel enchant enchant-devel pam-devel git perl-ExtUtils perl-ExtUtils-MakeMaker perl-Time-HiRes openldap openldap-devel curl curl-devel diffutils libc-client libc-client-devel numactl lsof pkgconfig gdbm-devel tk-devel libatomic_ops-devel gperftools bluez-libs-devel
sudo yum -y install unzip zip rar unrar rsync psmisc syslog-ng-libdbi
cd
#git --version | awk 'NR==1 {print $3}' > /tmp/gitversion
#if [ -f /tmp/gitversion ]; then
#sed -i 's/\.//g' /tmp/gitversion
#if [ $(cat /tmp/gitversion) -lt 253 ]; then
#if [ ! "$(cat /tmp/gitversion)" = "253" ]; then
#yum -y remove git
#cd /usr/src
#wget -q --no-check-certificate https://vpssim.com/script/vpssim/git-2.5.3.tar.gz
#tar xzf git-2.5.3.tar.gz
#cd /usr/src/git-2.5.3
#make prefix=/usr/local/git all
#make prefix=/usr/local/git install
#echo "export PATH=$PATH:/usr/local/git/bin" >> /etc/bashrc
#source /etc/bashrc
#cd
#fi
#else
#cd /usr/src
#wget -q --no-check-certificate https://vpssim.com/script/vpssim/git-2.5.3.tar.gz
#tar xzf git-2.5.3.tar.gz
#cd /usr/src/git-2.5.3
#make prefix=/usr/local/git all
#make prefix=/usr/local/git install
#echo "export PATH=$PATH:/usr/local/git/bin" >> /etc/bashrc
#source /etc/bashrc
#cd
#fi
echo "=========================================================================="
echo "Download Nginx Module ... "
echo "=========================================================================="
cd /usr/local/vpssim
# /usr/local/vpssim/echo-nginx-module
rm -rf echo-nginx-module*
wget --no-check-certificate https://vpssim.com/script/vpssim/module-nginx/echo-nginx-module.zip
unzip -oq echo-nginx-module.zip
rm -rf echo-nginx-module.zip
# /usr/local/vpssim/ngx_http_substitutions_filter_module
rm -rf ngx_http_substitutions_filter_module*
wget --no-check-certificate https://vpssim.com/script/vpssim/module-nginx/ngx_http_substitutions_filter_module.zip
unzip -oq ngx_http_substitutions_filter_module.zip
rm -rf ngx_http_substitutions_filter_module.zip
# /usr/local/vpssim/ngx_cache_purge-master
rm -rf ngx_cache_purge*
wget --no-check-certificate https://vpssim.com/script/vpssim/module-nginx/ngx_cache_purge.zip
unzip -oq ngx_cache_purge.zip
rm -rf ngx_cache_purge.zip
# /usr/local/vpssim/headers-more-nginx-module
rm -rf headers-more-nginx-module*
wget --no-check-certificate https://vpssim.com/script/vpssim/module-nginx/headers-more-nginx-module.zip
unzip -oq headers-more-nginx-module.zip
rm -rf headers-more-nginx-module.zip
# /usr/local/vpssim/openssl-1.0.2h
rm -rf ${opensslversion}
wget -q --no-check-certificate https://vpssim.com/script/vpssim/module-nginx/${opensslversion}.tar.gz
tar -xzxf ${opensslversion}.tar.gz
rm -rf ${opensslversion}.tar.gz
# $moduledir/${zlibversion}
rm -rf ${zlibversion}
wget -q --no-check-certificate https://vpssim.com/script/vpssim/module-nginx/${zlibversion}.tar.gz
tar -xzxf ${zlibversion}.tar.gz
rm -rf ${zlibversion}.tar.gz
# /usr/local/vpssim/pcre-8.39
rm -rf pcre-8.39
wget -q --no-check-certificate https://vpssim.com/script/vpssim/module-nginx/pcre-8.39.zip
unzip -oq pcre-8.39.zip
rm -rf pcre-8.39.zip
# /usr/local/vpssim/ngx_http_redis-0.3.8
rm -rf ngx_http_redis-0.3.8
wget -q --no-check-certificate https://vpssim.com/script/vpssim/module-nginx/ngx_http_redis-0.3.8.tar.gz
tar -xzxf ngx_http_redis-0.3.8.tar.gz
rm -rf ngx_http_redis-0.3.8.tar.gz
# /usr/local/vpssim/redis2-nginx-module
rm -rf redis2-nginx-module*
wget --no-check-certificate https://vpssim.com/script/vpssim/module-nginx/redis2-nginx-module.zip
unzip -oq redis2-nginx-module.zip
rm -rf redis2-nginx-module.zip
# /usr/local/vpssim/set-misc-nginx-module
rm -rf set-misc-nginx-module*
wget --no-check-certificate https://vpssim.com/script/vpssim/module-nginx/set-misc-nginx-module.zip
unzip -oq set-misc-nginx-module.zip
rm -rf set-misc-nginx-module.zip
# /usr/local/vpssim/ngx_devel_kit
rm -rf ngx_devel_kit*
wget --no-check-certificate https://vpssim.com/script/vpssim/module-nginx/ngx_devel_kit.zip
unzip -oq ngx_devel_kit.zip
rm -rf ngx_devel_kit.zip
# /usr/local/vpssim/ngx_http_concat
rm -rf ngx_http_concat
wget -q --no-check-certificate https://vpssim.com/script/vpssim/module-nginx/ngx_http_concat.tar.gz
tar -xzxf ngx_http_concat.tar.gz
rm -rf ngx_http_concat.tar.gz
# /usr/local/vpssim/srcache-nginx-module
rm -rf srcache-nginx-module*
wget --no-check-certificate https://vpssim.com/script/vpssim/module-nginx/srcache-nginx-module.zip
unzip -oq srcache-nginx-module.zip
rm -rf srcache-nginx-module.zip
# /usr/local/vpssim/memc-nginx-module
rm -rf memc-nginx-module*
wget --no-check-certificate https://vpssim.com/script/vpssim/module-nginx/memc-nginx-module.zip
unzip -oq memc-nginx-module.zip
rm -rf memc-nginx-module.zip
# /usr/local/vpssim/libatomic_ops-master
rm -rf libatomic_ops*
wget --no-check-certificate https://vpssim.com/script/vpssim/module-nginx/libatomic_ops.zip
unzip -oq libatomic_ops.zip
rm -rf libatomic_ops.zip
# /usr/local/vpssim/nginx-module-vts-master
#rm -rf nginx_module_vts*
#wget -q http://vpssim.com/script/vpssim/module-nginx/nginx_module_vts.tar.gz
#tar -xzxf nginx_module_vts.tar.gz
#rm -rf nginx_module_vts.tar.gz
cd
cd /usr/local/vpssim
#cai dat nginx
wget -q http://nginx.org/download/nginx-${Nginx_VERSION}.tar.gz
tar -xzf nginx-${Nginx_VERSION}.tar.gz
rm -rf /usr/local/vpssim/nginx-${Nginx_VERSION}.tar.gz
cd /usr/local/vpssim/nginx-${Nginx_VERSION}
#sed -i 's/"Server: nginx"/"Server: Nginx-VPSSIM"/g' /usr/local/vpssim/nginx-${Nginx_VERSION}/src/http/ngx_http_header_filter_module.c
#sed -i 's/"Server: "/"Server: Nginx-VPSSIM"/g' /usr/local/vpssim/nginx-${Nginx_VERSION}/src/http/ngx_http_header_filter_module.c
./configure --prefix=/usr/share/nginx \
--sbin-path=/usr/sbin/nginx \
--group=nginx --user=nginx \
--pid-path=/var/run/nginx.pid \
--conf-path=/etc/nginx/nginx.conf \
--with-http_v2_module \
--with-http_ssl_module \
--with-ipv6 \
--with-http_flv_module \
--with-http_mp4_module \
--with-http_random_index_module \
--with-http_secure_link_module \
--with-http_stub_status_module \
--with-http_sub_module \
--with-http_xslt_module \
--with-http_addition_module \
--with-http_dav_module \
--with-http_geoip_module \
--with-http_image_filter_module \
--with-http_perl_module \
--with-mail \
--with-mail_ssl_module \
--with-http_gunzip_module \
--with-http_gzip_static_module \
--with-file-aio \
--with-pcre=$moduledir/pcre-8.39 \
--with-pcre-jit \
--with-google_perftools_module \
--with-debug \
--with-openssl=$moduledir/${opensslversion} \
--with-zlib=$moduledir/${zlibversion} \
--with-openssl-opt="enable-tlsext" \
--with-http_realip_module \
--with-http_stub_status_module \
--add-module=$moduledir/ngx_devel_kit-master \
--add-module=$moduledir/echo-nginx-module-master \
--add-module=$moduledir/memc-nginx-module-master \
--add-module=$moduledir/set-misc-nginx-module-master \
--add-module=$moduledir/srcache-nginx-module-master \
--add-module=$moduledir/ngx_http_concat \
--add-module=$moduledir/ngx_http_substitutions_filter_module-master \
--add-module=$moduledir/ngx_cache_purge-master \
--add-module=$moduledir/headers-more-nginx-module-master \
--add-module=$moduledir/redis2-nginx-module-master \
--add-module=$moduledir/ngx_http_redis-0.3.8 
make
make install
############################
# Download init & config file for nginx
rm -f /etc/init.d/nginx
download_initd_nginx () {
wget --no-check-certificate -q https://vpssim.com/script/vpssim/nginx -O /etc/init.d/nginx && chmod +x /etc/init.d/nginx
}
download_initd_nginx
checkdownload_initd_nginx=`cat /etc/init.d/nginx`
if [ -z "$checkdownload_initd_nginx" ]; then
download_initd_nginx
fi
chmod +x /usr/sbin/nginx
rm -rf /etc/nginx/nginx.conf
mv /tmp/nginx.conf /etc/nginx/nginx.conf
# End Download init & config file for nginx
############################
yum -y install MariaDB-client MariaDB-common MariaDB-compat MariaDB-devel MariaDB-server MariaDB-shared perl-DBD-MySQL
yum -y install exim syslog-ng cronie cronie-anacron
yum -y --enablerepo=remi,remi-php56 install php php-curl php-soap php-cli php-snmp php-pspell redis php-pecl-redis php-gmp php-ldap php-bcmath php-intl php-imap perl-libwww-perl perl-LWP-Protocol-https php-pear-Net-SMTP php-enchant php-common php-fpm php-gd php-devel php-mysql php-pear php-pecl-memcached php-pecl-memcache php-opcache php-pdo php-zlib php-xml php-mbstring php-mcrypt php-xmlrpc php-tidy
yum -y install memcached 
yum -y install ImageMagick ImageMagick-devel ImageMagick-c++ ImageMagick-c++-devel 
yes "" | pecl install imagick
echo "extension=imagick.so" > /etc/php.d/imagick.ini

clear
echo "=========================================================================="
echo "Installation is complete, start the configuration... "
echo "=========================================================================="
sleep 3
	ramformariadb=$(calc $svram/10*6)
	ramforphpnginx=$(calc $svram-$ramformariadb)
	max_children=$(calc $ramforphpnginx/30)
	memory_limit=$(calc $ramforphpnginx/5*3)M
	mem_apc=$(calc $ramforphpnginx/5)M
	buff_size=$(calc $ramformariadb/10*8)M
	log_size=$(calc $ramformariadb/10*2)M

service httpd stop 
chkconfig httpd off
chkconfig --add mysql
chkconfig --levels 235 mysql on
chkconfig --add nginx
chkconfig --levels 235 nginx on
chkconfig --add php-fpm
chkconfig --levels 235 php-fpm on
chkconfig --add exim
chkconfig --levels 235 exim on
chkconfig --add syslog-ng
chkconfig --levels 235 syslog-ng on
chkconfig --add redis
chkconfig --level 345 redis on
service mysql start
service exim start
service syslog-ng start

mkdir -p /home/vpssim.demo/public_html
cd /home/vpssim.demo/public_html
#wget http://hostingaz.vn/script/vpssim/robots.txt
wget --no-check-certificate -q https://vpssim.com/script/vpssim/html/install/index.html
cd
mkdir -p /home/vpssim.demo/private_html
mkdir -p /home/vpssim.demo/logs
chmod 777 /home/vpssim.demo/logs
mkdir -p /var/log/nginx
chown -R nginx:nginx /var/log/nginx
chown -R nginx:nginx /var/lib/php/session

rm -rf /etc/sysconfig/memcached
cat > "/etc/sysconfig/memcached" <<END
PORT="11211"
USER="memcached"
MAXCONN="10024"
CACHESIZE="20"
OPTIONS=""
END

rm -rf /etc/nginx/conf.d
mkdir -p /etc/nginx/conf.d
    cat > "/etc/nginx/conf.d/vpssim.demo.conf" <<END
server {
	    server_name www.vpssim.demo;
	    rewrite ^(.*) http://vpssim.demo\$1 permanent;
    	}
server {
	    listen   80 default_server;

    	access_log off;
    	error_log off;
    	# error_log /home/vpssim.demo/logs/error.log;
    	root /home/vpssim.demo/public_html;
include /etc/nginx/conf/ddos2.conf;
	index index.php index.html index.htm;
    	server_name vpssim.demo;   


#///////////////////////////////////////////////////////
#Run all the websites,if you use your rule, comment or delete the line below (AAA)
include /etc/nginx/conf/all.conf;

#If you use your rule, comment or delete above line, and  Uncoment 3 lines belows and set your rule within it..
#location / {
#Uncomment 3 lines and set your rules here!
#}

#security, sql injection Propeller ....(uncoment if you want to use). Because some website plugins do not run with this config, so VPSSIM to turn off default
#include /etc/nginx/conf/block.conf;

# Error Page
#error_page 403 /errorpage_html/403.html;
#error_page 404 /errorpage_html/404.html;
#error_page 405 /errorpage_html/405.html;
#error_page 502 /errorpage_html/502.html;
#error_page 503 /errorpage_html/503.html;
#error_page 504 /errorpage_html/504.html;
#location ^~ /errorpage_html/ {
#   internal;
#    root /home/vpssim.demo;
#    access_log              off;
#}
    	location ~ \.php$ {
		fastcgi_split_path_info ^(.+\.php)(/.+)$;
        	include /etc/nginx/fastcgi_params;
        	fastcgi_pass 127.0.0.1:9000;
        	fastcgi_index index.php;
		fastcgi_connect_timeout 120;
		fastcgi_send_timeout 180;
		fastcgi_read_timeout 180;
		fastcgi_buffer_size 256k;
		fastcgi_buffers 4 256k;
		fastcgi_busy_buffers_size 256k;
		fastcgi_temp_file_write_size 256k;
		fastcgi_intercept_errors on;
        	fastcgi_param SCRIPT_FILENAME /home/vpssim.demo/public_html\$fastcgi_script_name;
    	}

include /etc/nginx/conf/staticfiles.conf;
#include /etc/nginx/conf/phpstatus.conf;
include /etc/nginx/conf/drop.conf;

}
	
server {
	    listen   $svport;
	 	access_log        off;
		log_not_found     off;
	 	error_log         off;
    	root /home/vpssim.demo/private_html;
    	auth_basic "Authorization Required ( Get User & Password at /home/VPSSIM-manage-info.txt or Create new one by : VPSSIM menu ->  Default User & Password )";
		auth_basic_user_file  /etc/nginx/.htpasswd;
	    index index.php index.html index.htm;
    	server_name vpssim.demo;
 
     	location / {
		try_files \$uri \$uri/ /index.php;
   	    }
        location /nginx_status {
  		stub_status on;
  		access_log   off;
		}
    	location /php_status {
            	fastcgi_pass 127.0.0.1:9000;
            	fastcgi_index index.php;
            	fastcgi_param SCRIPT_FILENAME  /home/vpssim.demo/public_html\$fastcgi_script_name;
            	include /etc/nginx/fastcgi_params;
    	}
    	location ~ \.php$ {
		fastcgi_split_path_info ^(.+\.php)(/.+)$;
        	include /etc/nginx/fastcgi_params;
        	fastcgi_pass 127.0.0.1:9000;
        	fastcgi_index index.php;
			fastcgi_connect_timeout 1000;
			fastcgi_send_timeout 1000;
			fastcgi_read_timeout 1000;
			fastcgi_buffer_size 256k;
			fastcgi_buffers 4 256k;
			fastcgi_busy_buffers_size 256k;
			fastcgi_temp_file_write_size 256k;
			fastcgi_intercept_errors on;
        	fastcgi_param SCRIPT_FILENAME /home/vpssim.demo/private_html\$fastcgi_script_name;
    	}
        location ~* \.(bak|back|bk)$ {
		deny all;
	}
}

END


if [[ $svram -ge 32 && $svram -le 449  ]] ; then 
pmmaxchildren=4
pmstartservers=2
pmminspareservers=1
pmmaxspareservers=3
pmmaxrequests=150
###############################################
elif [[ $svram -ge 450 && $svram -le 1300  ]] ; then
pmmaxchildren=10
pmstartservers=3
pmminspareservers=2
pmmaxspareservers=6
pmmaxrequests=400
###############################################
elif [[ $svram -ge 1302 && $svram -le 1800  ]] ; then
pmmaxchildren=15
pmstartservers=3
pmminspareservers=2
pmmaxspareservers=6
pmmaxrequests=500
###############################################
elif [[ $svram -ge 1801 && $svram -le 2800  ]] ; then
pmmaxchildren=20
pmstartservers=3
pmminspareservers=2
pmmaxspareservers=6
pmmaxrequests=500
###############################################
elif [[ $svram -ge 2801 && $svram -le 5000  ]] ; then
pmmaxchildren=33
pmstartservers=3
pmminspareservers=2
pmmaxspareservers=6
pmmaxrequests=500

###############################################
else
pmmaxchildren=50
pmstartservers=3
pmminspareservers=2
pmmaxspareservers=6
pmmaxrequests=500
fi




rm -f /etc/php-fpm.d/www.conf
    cat > "/etc/php-fpm.d/www.conf" <<END
[www]
listen = 127.0.0.1:9000
listen.allowed_clients = 127.0.0.1
user = nginx
group = nginx
pm = dynamic
pm.max_children = $pmmaxchildren
pm.start_servers = $pmstartservers
; Defaul: pm.min_spare_servers + (pm.max_spare_servers - pm.min_spare_servers) / 2
pm.min_spare_servers = $pmminspareservers
pm.max_spare_servers = $pmmaxspareservers
pm.max_requests = $pmmaxrequests

pm.status_path = /php_status
request_terminate_timeout = 100s
pm.process_idle_timeout = 10s;
request_slowlog_timeout = 4s
slowlog = /home/vpssim.demo/logs/php-fpm-slow.log
rlimit_files = 131072
rlimit_core = unlimited
catch_workers_output = yes
env[HOSTNAME] = \$HOSTNAME
env[PATH] = /usr/local/bin:/usr/bin:/bin
env[TMP] = /tmp
env[TMPDIR] = /tmp
env[TEMP] = /tmp
php_admin_value[error_log] = /home/vpssim.demo/logs/php-fpm-error.log
php_admin_flag[log_errors] = on
php_value[session.save_handler] = files
php_value[session.save_path] = /var/lib/php/session
END



rm -rf /etc/php.d/*opcache*
    cat > "/etc/php.ini" <<END
[PHP]
engine = On
short_open_tag = On
asp_tags = Off
precision = 14
output_buffering = 4096
zlib.output_compression = Off
implicit_flush = Off 
unserialize_callback_func =
serialize_precision = 17
disable_functions = escapeshellarg,escapeshellcmd,exec,ini_alter,passthru,pcntl_exec,popen,proc_close,proc_get_status,proc_nice,proc_open,proc_terminate,show_source,shell_exec,symlink,system
disable_classes =
zend.enable_gc = On
expose_php = Off
max_execution_time = 120
max_input_time = 120
memory_limit = $memory_limit
max_input_vars = 6000
realpath_cache_size = 4096k
realpath_cache_ttl = 360
error_reporting = E_ALL & ~E_DEPRECATED & ~E_STRICT
display_errors = Off
display_startup_errors = Off
log_errors = On
log_errors_max_len = 1024
ignore_repeated_errors = Off
ignore_repeated_source = Off
report_memleaks = On
track_errors = Off
html_errors = On
variables_order = "GPCS"
request_order = "GP"
register_argc_argv = Off
auto_globals_jit = On
post_max_size = 120M
auto_prepend_file =
auto_append_file =
default_mimetype = "text/html"
default_charset = "UTF-8"
doc_root =
user_dir =
enable_dl = Off
cgi.fix_pathinfo=0
file_uploads = On
upload_max_filesize = 120M
max_file_uploads = 20
allow_url_fopen = On
allow_url_include = Off
default_socket_timeout = 60
cli_server.color = On

[Date]
date.timezone = America/New_York

[filter]

[iconv]

[intl]

[sqlite]

[sqlite3]

[Pcre]

[Pdo]

[Pdo_mysql]
pdo_mysql.cache_size = 2000
pdo_mysql.default_socket=

[Phar]

[mail function]
SMTP = localhost
smtp_port = 25
sendmail_path = /usr/sbin/sendmail -t -i
mail.add_x_header = On

[SQL]
sql.safe_mode = Off

[ODBC]
odbc.allow_persistent = On
odbc.check_persistent = On
odbc.max_persistent = -1
odbc.max_links = -1
odbc.defaultlrl = 4096
odbc.defaultbinmode = 1

[Interbase]
ibase.allow_persistent = 1
ibase.max_persistent = -1
ibase.max_links = -1
ibase.timestampformat = "%Y-%m-%d %H:%M:%S"
ibase.dateformat = "%Y-%m-%d"
ibase.timeformat = "%H:%M:%S"

[MySQL]
mysql.allow_local_infile = On
mysql.allow_persistent = On
mysql.cache_size = 2000
mysql.max_persistent = -1
mysql.max_links = -1
mysql.default_port =
mysql.default_socket =
mysql.default_host =
mysql.default_user =
mysql.default_password =
mysql.connect_timeout = 60
mysql.trace_mode = Off

[MySQLi]
mysqli.max_persistent = -1
mysqli.allow_persistent = On
mysqli.max_links = -1
mysqli.cache_size = 2000
mysqli.default_port = 3306
mysqli.default_socket =
mysqli.default_host =
mysqli.default_user =
mysqli.default_pw =
mysqli.reconnect = Off

[mysqlnd]
mysqlnd.collect_statistics = On
mysqlnd.collect_memory_statistics = Off

[OCI8]

[PostgreSQL]
pgsql.allow_persistent = On
pgsql.auto_reset_persistent = Off
pgsql.max_persistent = -1
pgsql.max_links = -1
pgsql.ignore_notice = 0
pgsql.log_notice = 0

[Sybase-CT]
sybct.allow_persistent = On
sybct.max_persistent = -1
sybct.max_links = -1
sybct.min_server_severity = 10
sybct.min_client_severity = 10

[bcmath]
bcmath.scale = 0

[browscap]

[Session]
session.save_handler = files
session.use_cookies = 1
session.use_only_cookies = 1
session.name = PHPSESSID
session.auto_start = 0
session.cookie_lifetime = 0
session.cookie_path = /
session.cookie_domain =
session.cookie_httponly =
session.serialize_handler = php
session.gc_probability = 1
session.gc_divisor = 1000
session.gc_maxlifetime = 1440
session.bug_compat_42 = Off
session.bug_compat_warn = Off
session.referer_check =
session.cache_limiter = nocache
session.cache_expire = 180
session.use_trans_sid = 0
session.hash_function = 0
session.hash_bits_per_character = 5
url_rewriter.tags = "a=href,area=href,frame=src,input=src,form=fakeentry"

[MSSQL]
mssql.allow_persistent = On
mssql.max_persistent = -1
mssql.max_links = -1
mssql.min_error_severity = 10
mssql.min_message_severity = 10
mssql.compatability_mode = Off

[Assertion]

[mbstring]

[gd]

[exif]

[Tidy]
tidy.clean_output = Off

[soap]
soap.wsdl_cache_enabled=1
soap.wsdl_cache_dir="/tmp"
soap.wsdl_cache_ttl=86400
soap.wsdl_cache_limit = 5

[sysvshm]

[ldap]
ldap.max_links = -1

[mcrypt]

[dba]

END

if [ ! -d /home/0-VPSSIM-SHORTCUT ];then
wget --no-check-certificate -q https://vpssim.com/script/vpssim/check-imagick.php.zip -O /home/vpssim.demo/private_html/check-imagick.php
mkdir -p /home/0-VPSSIM-SHORTCUT
mkdir -p /home/vpssim.demo/private_html/backup
ln -s /home/vpssim.demo/private_html/backup /home/0-VPSSIM-SHORTCUT/Backup\ \(Website\ +\ Database\)
ln -s /etc/nginx/conf.d /home/0-VPSSIM-SHORTCUT/Vhost\ \(Vitual\ Host\)
echo "This is shortcut to Backup ( Code & Database ) and Vitual Host in VPS" > /home/0-VPSSIM-SHORTCUT/readme.txt
echo "Please do not delete it" >>  /home/0-VPSSIM-SHORTCUT/readme.txt
fi
rm -f /etc/php.d/*opcache*
cat > "/etc/php.d/opcache.ini" <<END
zend_extension=opcache.so
opcache.enable=1
opcache.enable_cli=1
opcache.memory_consumption=40
opcache.interned_strings_buffer=16
opcache.max_accelerated_files=3000
opcache.max_wasted_percentage=5
opcache.use_cwd=1
opcache.validate_timestamps=1
opcache.revalidate_freq=60
opcache.fast_shutdown=1
END
rm -f /etc/sysctl.conf
    cat > "/etc/sysctl.conf" <<END
net.ipv4.ip_forward = 0
net.ipv4.conf.default.rp_filter = 1
net.ipv4.conf.default.accept_source_route = 0
kernel.sysrq = 0
net.ipv4.tcp_synack_retries = 2
kernel.core_uses_pid = 1
net.ipv4.tcp_syncookies = 1
kernel.msgmnb = 65536
kernel.msgmax = 65536
kernel.shmmax = 68719476736
kernel.shmall = 4294967296
kernel.panic = 10
net.core.netdev_max_backlog = 4000
net.ipv4.tcp_max_syn_backlog = 10240
net.ipv4.tcp_fin_timeout = 30
net.ipv4.tcp_keepalive_time = 1800
vm.swappiness = 10
vm.dirty_ratio = 80
vm.dirty_background_ratio = 10
kernel.core_uses_pid = 0
kernel.core_pattern = /dev/null
fs.suid_dumpable = 0
net.ipv4.tcp_challenge_ack_limit = 999999999
END

rm -f /etc/php-fpm.conf
    cat > "/etc/php-fpm.conf" <<END
include=/etc/php-fpm.d/*.conf

[global]
pid = /var/run/php-fpm/php-fpm.pid
error_log = /home/vpssim.demo/logs/php-fpm.log
emergency_restart_threshold = 10
emergency_restart_interval = 1m
process_control_timeout = 10s
events.mechanism = epoll
END

if [[ $svram -ge 32 && $svram -le 449  ]] ; then 
heso1=1
elif [[ $svram -ge 450 && $svram -le 1099  ]] ; then
heso1=1
elif [[ $svram -ge 1100 && $svram -le 1999  ]] ; then
heso1=3
elif [[ $svram -ge 2000 && $svram -le 2999  ]] ; then
heso1=6
elif [[ $svram -ge 3000 && $svram -le 5000  ]] ; then
heso1=8
else
heso1=10
fi
if [[ $svram -ge 32 && $svram -le 449  ]] ; then 
heso2=1
elif [[ $svram -ge 450 && $svram -le 1099  ]] ; then
heso2=2
elif [[ $svram -ge 1100 && $svram -le 1999  ]] ; then
heso2=3
elif [[ $svram -ge 2000 && $svram -le 2999  ]] ; then
heso2=4
elif [[ $svram -ge 3000 && $svram -le 5000  ]] ; then
heso2=6
else
heso2=10
fi
if [[ $svram -ge 32 && $svram -le 449  ]] ; then 
heso3=1
elif [[ $svram -ge 450 && $svram -le 1099  ]] ; then
heso3=2
elif [[ $svram -ge 1100 && $svram -le 1999  ]] ; then
heso3=3
elif [[ $svram -ge 2000 && $svram -le 2999  ]] ; then
heso3=4
elif [[ $svram -ge 3000 && $svram -le 5000  ]] ; then
heso3=5
else
heso3=6
fi
if [[ $svram -ge 32 && $svram -le 449  ]] ; then 
heso4=1
elif [[ $svram -ge 450 && $svram -le 1099  ]] ; then
heso4=1
elif [[ $svram -ge 1100 && $svram -le 1999  ]] ; then
heso4=2
elif [[ $svram -ge 2000 && $svram -le 2999  ]] ; then
heso4=2
elif [[ $svram -ge 3000 && $svram -le 5000  ]] ; then
heso4=3
else
heso4=4
fi
if ! [[ $cpucores =~ $checktruenumber ]] ; then
cpucores=1
fi 
rm -f /etc/my.cnf.d/server.cnf
    cat > "/etc/my.cnf.d/server.cnf" <<END

[mysqld]
skip-host-cache
skip-name-resolve
collation-server = utf8_unicode_ci
init-connect='SET NAMES utf8'
character-set-server = utf8
skip-character-set-client-handshake

user = mysql
default-storage-engine = InnoDB
local-infile=0
ignore-db-dir=lost+found
character-set-server=utf8
datadir=/var/lib/mysql
socket=/var/lib/mysql/mysql.sock

#bind-address=127.0.0.1
back_log = $(calc 75*$heso2)
max_connections = $(calc 22*$heso2)
key_buffer_size = 32M
myisam_recover = FORCE,BACKUP
myisam_sort_buffer_size = $(calc 32*$heso1)M
join_buffer_size = $(calc 32*$heso2)K  
read_buffer_size = $(calc 32*$heso2)K 
sort_buffer_size = $(calc 64*$heso2)K 
table_definition_cache = 2048
table_open_cache = 2048
thread_cache_size = $(calc 8*$heso2)K
wait_timeout = 50
connect_timeout = 10
interactive_timeout = 40
optimizer_search_depth = 4
tmp_table_size = $(calc 16*$heso3)M
max_heap_table_size = $(calc 16*$heso3)M
max_allowed_packet = $(calc 16*$heso2)M
max_seeks_for_key = 1000

max_length_for_sort_data = 1024
net_buffer_length = 16384
max_connect_errors = 100000
concurrent_insert = 2
read_rnd_buffer_size = $(calc 1*$heso2)M
bulk_insert_buffer_size = 8M
query_cache_limit = 512K
query_cache_size = $(calc 8*$heso2)M
query_cache_type = 1
query_cache_min_res_unit = 2K


log_warnings=1
slow_query_log=0
long_query_time=1
log_error = /home/vpssim.demo/logs/mysql.log
log_queries_not_using_indexes = 0
slow_query_log_file = /home/vpssim.demo/logs/mysql-slow.log

# innodb settings
innodb_large_prefix=1
innodb_purge_threads=1
innodb_file_format = Barracuda
innodb_file_per_table = 1
innodb_open_files = $(calc 200*$heso2)
innodb_data_file_path= ibdata1:10M:autoextend
innodb_buffer_pool_size = $(calc 64*$heso2)M
skip-innodb_doublewrite # or commented out

## https://mariadb.com/kb/en/mariadb/xtradbinnodb-server-system-variables/#innodb_buffer_pool_instances
#innodb_buffer_pool_instances=2

innodb_log_files_in_group = 2
innodb_log_file_size = 48M
#innodb_log_buffer_size = 1M
innodb_flush_log_at_trx_commit = 2
innodb_thread_concurrency = $(calc 2*$cpucores)
innodb_lock_wait_timeout=50
innodb_flush_method = O_DIRECT
innodb_support_xa=1

# 200 * # DISKS
#innodb_io_capacity = 100 # 100 for HDD
innodb_read_io_threads = $(calc 4*$cpucores)
innodb_write_io_threads = $(calc 4*$cpucores)

# mariadb settings
[mariadb]

userstat = 0
#key_cache_segments = 0  # 1 to 64
aria_group_commit = none
aria_group_commit_interval = 0
aria_log_file_size = $(calc 11*$heso2)M
aria_log_purge_type = immediate 
aria_pagecache_buffer_size = 1M
aria_sort_buffer_size = 1M

[mariadb-5.5]
#ignore_db_dirs=
query_cache_strip_comments=0

innodb_read_ahead = linear
innodb_adaptive_flushing_method = estimate
innodb_flush_neighbor_pages=none
innodb_stats_update_need_lock = 0
innodb_log_block_size = 512

log_slow_filter =admin,filesort,filesort_on_disk,full_join,full_scan,query_cache,query_cache_miss,tmp_table,tmp_table_on_disk

[mysqld_safe] 
socket=/var/lib/mysql/mysql.sock
log-error=/home/vpssim.demo/logs/mysql.log
#nice = -5
open-files-limit = 8192

[mysqldump]
quick
max_allowed_packet = 32M

[isamchk]
key_buffer = $(calc 16*$heso4)M
sort_buffer_size = $(calc 128*$heso4)K
read_buffer = $(calc 128*$heso4)K
write_buffer = $(calc 128*$heso4)K

[myisamchk]
key_buffer = $(calc 16*$heso4)M
sort_buffer_size = $(calc 128*$heso4)K
read_buffer = $(calc 128*$heso4)K
write_buffer = $(calc 128*$heso4)K

[mysqlhotcopy]
interactive-timeout
END
if [ "$phienbanmariadb" = "10.0" ] ; then
cat >> "/etc/my.cnf.d/server.cnf" <<END

[mariadb-10.0]
innodb_buffer_pool_dump_at_shutdown=1
innodb_buffer_pool_load_at_startup=1
innodb_buffer_pool_populate=0
performance_schema=OFF
innodb_stats_on_metadata=OFF
innodb_sort_buffer_size=1M
query_cache_strip_comments=0
log_slow_filter =admin,filesort,filesort_on_disk,full_join,full_scan,query_cache,query_cache_miss,tmp_table,tmp_table_on_disk

END
fi

    cat >> "/etc/security/limits.conf" <<END
* soft nofile 65536
* hard nofile 65536
nginx soft nofile 65536
nginx hard nofile 65536
* soft core 0 
* hard core 0
END

ulimit  -n 65536


mkdir -p /etc/vpssim

rm -f /home/vpssim.conf
echo "" > /etc/vpssim/pwprotect.default

    cat > "/home/vpssim.conf" <<END
mainsite="vpssim.demo"
priport="$svport"
serverip="$svip"
END
rm -rf /etc/vpssim/nginx.version
cat > "/etc/vpssim/nginx.version" <<END
${Nginx_VERSION}
END
cat > "/etc/vpssim/vpssim.version" <<END
${vpssim_version}
END
cat > "/etc/vpssim/phpmyadmin.version" <<END
${phpmyadmin_version}
END
mkdir -p /etc/redis
cat > "/etc/redis/redis.conf" <<END
maxmemory 40mb
maxmemory-policy allkeys-lru
END
if [ ! "$(grep LANG=en_US.utf-8 /etc/environment)" == "LANG=en_US.utf-8" ]; then
cat > "/etc/environment" <<END
LANG=en_US.utf-8
LC_ALL=en_US.utf-8
END
fi
rm -f /var/lib/mysql/ib_logfile0
rm -f /var/lib/mysql/ib_logfile1
rm -f /var/lib/mysql/ibdata1

# Download mysql_secure_installation
rm -f /bin/mysql_secure_installation
download_mysql_secure_installation () {
wget --no-check-certificate -q https://vpssim.com/script/vpssim/mysql_secure_installation -O /bin/mysql_secure_installation && chmod +x /bin/mysql_secure_installation
}
download_mysql_secure_installation
checkmysql_secure_installation=`cat /bin/mysql_secure_installation`
if [ -z "$checkmysql_secure_installation" ]; then
download_mysql_secure_installation
fi


wget --no-check-certificate -q https://vpssim.com/script/vpssim/Softwear/wp-cli.phar
chmod +x wp-cli.phar
mv wp-cli.phar /usr/local/bin/wp
#clear
#echo "=========================================================================="
#echo "Set Root Password MySQL ... "
#echo "=========================================================================="
/bin/mysql_secure_installation
service mysql restart
cat >> "/home/vpssim.conf" <<END
emailmanage="$vpssimemail"
END
clear
echo "=========================================================================="
echo "Install Phpmyadmin... "
echo "=========================================================================="
sleep 2
cd /home/vpssim.demo/private_html/
wget -q https://gist.github.com/ck-on/4959032/raw/0b871b345fd6cfcd6d2be030c1f33d1ad6a475cb/ocp.php
wget --no-check-certificate -q https://vpssim.com/script/vpssim/memcache.php.zip -O /home/vpssim.demo/private_html/memcache.php
wget -q https://files.phpmyadmin.net/phpMyAdmin/${phpmyadmin_version}/phpMyAdmin-${phpmyadmin_version}-all-languages.zip
unzip -q phpMyAdmin-*.zip
yes | cp -rf phpMyAdmin-*/* .
rm -rf phpMyAdmin-*
randomblow=`date |md5sum |cut -c '1-32'`;
sed -e "s|cfg\['blowfish_secret'\] = ''|cfg['blowfish_secret'] = '$randomblow'|" config.sample.inc.php > config.inc.php
cd
mkdir -p /var/lib/php/session
chown -R nginx:nginx /var/lib/php
clear
echo "=========================================================================="
echo "Creating VPSSIM menu...... "
echo "=========================================================================="
rm -rf /etc/motd
wget --no-check-certificate -q https://vpssim.com/script/vpssim/motd -O /etc/motd
# Download vpssim_main_menu
download_vpssim_main_menu () {
wget --no-check-certificate -q https://vpssim.com/script/vpssim/vpssim -O /bin/vpssim && chmod +x /bin/vpssim
}
download_vpssim_main_menu
checkvpssim_main_menu=`cat /bin/vpssim`
if [ -z "$checkvpssim_main_menu" ]; then
download_vpssim_main_menu
fi
cd /etc/vpssim/
# Download VPSSIM data
download_vpssim_data () {
rm -rf menu.zip
wget --no-check-certificate -q https://vpssim.com/script/vpssim/menu.zip
unzip -q menu.zip
rm -rf menu.zip
}
download_vpssim_data
if [ ! -f /etc/vpssim/menu/vpssim-tien-ich ]; then
download_vpssim_data
fi
wget --no-check-certificate -q https://vpssim.com/script/vpssim/errorpage_html.zip
unzip -q errorpage_html.zip
rm -rf errorpage_html.zip
cp -r /etc/vpssim/errorpage_html /home/vpssim.demo/
cd
# Chmod 755 Menu
find /etc/vpssim/menu -type f -exec chmod 755 {} \;
find /etc/vpssim/menu/checkddos -type f -exec chmod 755 {} \;
find /etc/vpssim/menu/crontab -type f -exec chmod 755 {} \;
find /etc/vpssim/menu/CSF-Fiwall -type f -exec chmod 755 {} \;
find /etc/vpssim/menu/downloadlog -type f -exec chmod 755 {} \;
find /etc/vpssim/menu/memcache -type f -exec chmod 755 {} \;
find /etc/vpssim/menu/nangcap-php -type f -exec chmod 755 {} \;
find /etc/vpssim/menu/opcache -type f -exec chmod 755 {} \;
find /etc/vpssim/menu/pagespeed -type f -exec chmod 755 {} \;
find /etc/vpssim/menu/swap -type f -exec chmod 755 {} \;
find /etc/vpssim/menu/tienich -type f -exec chmod 755 {} \;

# Download /etc/nginx/conf
cd /etc/nginx/
download_etc_nginx_conf () {
rm -rf conf.zip
wget --no-check-certificate -q https://vpssim.com/script/vpssim/conf.zip
unzip -q conf.zip
rm -rf conf.zip
}
download_etc_nginx_conf
if [ ! -f /etc/nginx/conf/staticfiles.conf ]; then
download_etc_nginx_conf
fi
find /etc/nginx/conf -type f -exec chmod 644 {} \;
cd

###################################################
# Dat mat khau bao ve phpmyadmin, backup files
clear
echo "=========================================================================="
echo "Creating Username & Password to protect phpMyadmin, backup files  ... "
echo "=========================================================================="
sleep 3
cp -r /etc/vpssim/menu/vpssim-tao-mat-khau-bao-ve-folder.py /usr/local/bin/htpasswd.py
chmod 755 /usr/local/bin/htpasswd.py
rm -rf /etc/nginx/.htpasswd
matkhaubv=`date |md5sum |cut -c '1-6'`
usernamebv=`echo "${vpssimemail};" | sed 's/\([^@]*\)@\([^;.]*\)\.[^;]*;[ ]*/\1 \2\n/g' | awk 'NR==1 {print $1}'`
htpasswd.py -c -b /etc/nginx/.htpasswd $usernamebv $matkhaubv
chmod -R 644 /etc/nginx/.htpasswd
cat > "/etc/vpssim/pwprotect.default" <<END
userdefault="$usernamebv"
passdefault="$matkhaubv"
END
wget --no-check-certificate -q https://vpssim.com/script/vpssim/Softwear/status.zip -O /home/vpssim.demo/public_html/status.php
rm -rf /etc/vpssim/defaulpassword.php
cat > "/etc/vpssim/defaulpassword.php" <<END
<?php
define('ADMIN_USERNAME','$usernamebv');   // Admin Username
define('ADMIN_PASSWORD','$matkhaubv');    // Admin Password
?>
END
sed -i "s/vpssim@vpssim.com/${vpssimemail}/g" /home/vpssim.demo/public_html/status.php
###################################################

if [ -f /etc/sysconfig/iptables ]; then
service iptables start
iptables -I INPUT -p tcp --dport 80 -j ACCEPT
iptables -I INPUT -p tcp --dport 22 -j ACCEPT
iptables -I INPUT -p tcp --dport 21 -j ACCEPT
iptables -I INPUT -p tcp --dport 25 -j ACCEPT
iptables -I INPUT -p tcp --dport 443 -j ACCEPT
iptables -I INPUT -p tcp --dport 465 -j ACCEPT
iptables -I INPUT -p tcp --dport 587 -j ACCEPT
iptables -I INPUT -p tcp --dport $svport -j ACCEPT
iptables -I INPUT -p tcp --dport 11211 -j ACCEPT
service iptables save
fi
clear
echo "=========================================================================="
echo "Setup CSF Firewall ... "
echo "=========================================================================="
sleep 3
/etc/vpssim/menu/vpssim-cai-csf-firewall-cai-dat-CSF-FIREWALL

chkconfig memcached on
service memcached start
rm -rf /root/install*
rm -rf /root/vpssim-setup
cat >> "/home/VPSSIM-manage-info.txt" <<END
=========================================================================
                           VPS MANAGE INFOMATION                         
=========================================================================

+ phpMyAdmin: http://$svip:$svport

+ Zend Opcache Manage: http://$svip:$svport/ocp.php

+ Memcache Manage: http://$svip:$svport/memcache.php

+ View Server Status: http://$svip/status.php

+ Login info for phpMyadmin, Zend Opcache Manager, status.php, download backup files ...

Username: $usernamebv
Password: $matkhaubv 

+ Command to call VPSSIM: vpssim

Note:
To have the best performance for VPS , you should enable : Zend Opcache, Memcached,
and using cache plugin (wp super cache....) for your website.

If VPS has Zend Opcache enabled, after editing PHP fils, you must clear Zend opcache (restart Php-FPM) 
changes of your code will be updated for your website.

Wish you success with VPSSIM !
END

# increase SSH login speed
if [ -f /etc/ssh/sshd_config ]; then 
sed -i 's/GSSAPIAuthentication yes/GSSAPIAuthentication no/g' /etc/ssh/sshd_config
sed -i 's/#UseDNS yes/UseDNS no/g' /etc/ssh/sshd_config
fi
#Change default folder ssh login
#if [ -f /root/.bash_profile ]; then
#sed -i "/.*#\ .bash_profile.*/acd /home" /root/.bash_profile
#fi
cat > "/tmp/finishedemail.sh" <<END
#!/bin/bash 

echo -e 'Subject: VPSSIM - Manage Infomation For Server $svip!

Hello!

Congratulations ! You have setup the server $svip by VPSSIM successfully 

The following is the information of your server management:

+ Command to call VPSSIM: vpssim
+ Link phpMyAdmin: http://$svip:$svport
+ Zend Opcache Manage: http://$svip:$svport/ocp.php
+ Memcached manage: http://$svip:$svport/memcache.php
+ View Server Status: http://$svip/status.php
+ Login info for phpMyadmin,ocp.php, memcache.php, status.php, download backup files, ... : 
Username: $usernamebv  
Password: $matkhaubv 

Note :

+ After the installation is complete, if the server does not have SWAP (virtual RAM), you should create SWAP by [ Swap Manage ] function (recommended)
+ To protect phpMyAdmin, backup files ...: use [ ON/OFF Protect phpMyAdmin ] function in [ PhpMyadmin Manage ]
+ To setup File Manager for server: use [ Setup File Manager ] function.
+ After add new website to server, setup FTP server and create FTP account for all website in server by [ FTP Server Manage ] function.
   by default, you can not login FTP by root account to server. If you want to use root account, you must use sFTP. Login using root info follow the below infomation:
   Host: sftp://$svip  - User: root - Password: Your_password - Port: 22 (or new SSH password you have changed)
+ If server timezone is not correct with your timezone, You can setup timezone for Server by [ Setting Server Timezone ] trong [ Tools - Addons ]
+ After add website and upload code to server. You must run [ Fix Chmod, Chown Error ] in [ Tools - Addons ] to setup permissions for it . 
   If your website is wordpress website, setup permissions by [ Fix Permission Error ] function in [ Wordpress Blog Tools ]
+ Depending on the number of websites, code & database space that you must config Zend Opcache, Memcached and Redis Cache by [ Zend Opcache Manage ], [ Memcache Manage ] and [ Redis Cache manage ].
+ For security, whenever has the ssh login to server, VPSSIM will send a notification message to $vpssimemail.\n  Change Email or disable notification email by [ On/Off Login Notification eMail ] function in [ Tools - Addons ].

Wish you success with VPSSIM by Nguyen Oanh - http://vpssim.com ' | exim  $vpssimemail
END
chmod +x /tmp/finishedemail.sh
/tmp/finishedemail.sh
rm -f /tmp/finishedemail.sh
clear

echo "=========================================================================="
echo "VPSSIM have completed the installation process."
echo "=========================================================================="
echo "Command to call VPSSIM: vpssim"
echo "--------------------------------------------------------------------------"
echo "Link phpMyAdmin: http://$svip:$svport"
echo "--------------------------------------------------------------------------"
echo "Zend Opcache Manage: http://$svip:$svport/ocp.php"
echo "--------------------------------------------------------------------------"
echo "Memcached Manage: http://$svip:$svport/memcache.php"
echo "--------------------------------------------------------------------------"
echo "View Server Status: http://$svip/status.php"
echo "--------------------------------------------------------------------------"
echo "Login info for phpMyAdmin, ocp.php, status.php, download backup files ..."
echo "--------------------------------------------------------------------------"
echo "Username: $usernamebv  | Password: $matkhaubv"
echo "--------------------------------------------------------------------------"
echo "Change this login infomation: VPSSIM menu ==> Default User & Password."
echo "=========================================================================="
echo "Manage info saved in: /home/VPSSIM-manage-info.txt "
echo "--------------------------------------------------------------------------"
echo "And send NOTE when using VPSSIM to: $vpssimemail"
echo "=========================================================================="
echo "Server will automatically restart after 3 seconds ... "
sleep 3
reboot
exit
